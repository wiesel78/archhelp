#!/bin/bash
#############################################################
# A typical installscript for Arch-Linux with 				#
# systemd, grub, btrfs, linux-ck . 							#
#															#
# Check and change this script for your personel use,		#
# of course you do when you're not familiar with the 		#
# german language. ;)										#
# Be careful with the partioning-part and don't forget to 	#
# add "elevator=bfq" in grub.cfg.							#
#############################################################

partitionierung() {
	# change keyboard to german and get filesystem and disk names
	loadkeys de			
	read -p "zu formatierende Platte angeben: " BOOT_HDD
	gdisk ${BOOT_HDD}
	read -p "Platten für btrfs eingeben: " BTRFS_HDD
	read -p "Label für das Btrfs-Volume angeben (Default: btrfs-root): " BTRFS_LABEL
	read -p "zusätzliche Optionen: " BTRFS_OPT
	read -p "Swap angeben: " SWAP 
	
	if [ ${BTRFS_LABEL} -eq "" ]
		then
			BTRFS_LABEL=btrfs-root
	fi
	
	# set up filesystem and mount for subvolumes 
	mkswap -L swap ${SWAP}
	mkfs.btrfs ${BTRFS_OPT} -L ${BTRFS_LABEL} ${BTRFS_HDD}
	sleep 5
	mount -o compress /dev/disk/by-label/${BTRFS_LABEL} /mnt
	swapon -L swap
	
	# create subvolumes
	VOLUME_COUNT=0
	NEW_SUBVOL=true
	while ( ${NEW_SUBVOL} -eq "true" )
	do
		read -p "Name des Subvol: " SUBVOL[${VOLUME_COUNT}]
		btrfs subvolume create /mnt/${SUBVOL[${VOLUME_COUNT}]}
		read -p "Weitere Subvols? [y/n]: " EINGABE
		if [ ${EINGABE} = "y" ] 
			then
				((VOLUME_COUNT++))
			else
				NEW_SUBVOL=false
		fi
	done
	
	# umount "main_btrfs" and mount subvolumes 
	sleep 3
	umount /mnt
	MOUNT_COUNT=0
	while (( ${MOUNT_COUNT} <= ${VOLUME_COUNT} )) 
	do
		read -p "Einhängepunkt für ${SUBVOL[${MOUNT_COUNT}]} ab /mnt: " MOUNTPOINT
		if [ ! -d /mnt/${MOUNTPOINT} ]
			then 
				mkdir /mnt/${MOUNTPOINT}
		fi
		mount -o compress,subvol=${SUBVOL[${MOUNT_COUNT}]} /dev/disk/by-label/${BTRFS_LABEL} /mnt/${MOUNTPOINT} 
		((MOUNT_COUNT++))
	done
	
	# delete variables; maybe unimportant, but i don't care
	unset BOOT_HDD MOUNT_COUNT NEW_SUBVOL VOLUME_COUNT EINGABE SWAP BTRFS_HDD BTRFS_OPT
}

installation () {
	# get wireless-lan if you need
	read -p "Wlan aktivieren? [y/n]: " WLAN
	if [ ${WLAN} = "y" ] 
		then
			wlan
	fi
	
	read -p "Ethernet aktivieren? [y/n]: " ETH
	if [ ${ETH} = "y" ] 
		then
			cp /etc/network.d/examples/ethernet-dhcp /etc/network.d/
			netcfg ethernet-dhcp
	fi
	
	# basic installation and some usefull tools 
	sed -i 's/#Server/Server/' /etc/pacman.d/mirrorlist
	sleep 5
	pacstrap /mnt base base-devel btrfs-progs zsh grml-zsh-config wpa_supplicant
	genfstab -Lp /mnt >> /mnt/etc/fstab
	
	unset WLAN ETH
	cp after-chroot /mnt/root/
	arch-chroot /mnt /mnt/root/after-chroot
	
	# umount disk and //To-Do some reboot and final shit
	# --all is a dirty trick
	# umount --all
	
}

wlan () {
	# setting up wlan with netcfg, dirty and quick
	# change to user doesn't have to change wireless-wpa with nano
	cp /etc/network.d/examples/wireless-wpa /etc/network.d/
	#read -p "Netzwerkname: " WPANAME
	#read -p "Netzwerkkey: " WPAKEY
	nano /etc/network.d/wireless-wpa
	netcfg wireless-wpa
}

# get options what we can do for you
# dirty and will be changed soon
echo "1 - Partitionierung"
echo "2 - Installation"
echo "3 - 1 + 2"
read -p "Option eingeben [1|2|3]:" OPT

case ${OPT} in
	1) partitionierung;;
	2) installation;;
	3) partitionierung
	   installation;;
	*) echo "Benutzung:[1|2|3]"
	   echo	"1 - Partitionierung"
	   echo "2 - Installation"
	   echo "3 - 1 + 2"
esac
